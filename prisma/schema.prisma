// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum RecipeStatus {
  TRENDING
  POPULAR
  NEW
}

model Recipe {
  id String @id @map("_id") @default(auto()) @db.ObjectId
  name String @unique
  status RecipeStatus @default(TRENDING)
  image_url String
  description String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ingredient Recipe_Ingredient[]

  userId String
  user User @relation(fields: [userId], references: [id])

  categoryId String?
  category Category? @relation(fields: [categoryId], references: [id])
  step Step[]
  comments Comment[]
  ratings Rating[]
  favorites Favorite[]
  stats Stats?
}

model Recipe_Ingredient{
  id String @id @map("_id") @default(auto()) @db.ObjectId

  recipeId String
  recipe Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  ingredientId String
  ingredient Ingredient @relation(fields: [ingredientId], references: [id])

  quantity String

  @@unique(fields: [recipeId, ingredientId])

  createdAt DateTime @default(now())
} 

model User {
  id String @id @map("_id") @default(auto()) @db.ObjectId
  name String
  email String @unique
  password String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createRecipe Recipe[]
  comments Comment[] 
  ratings Rating[] 
  favorites Favorite[] 
}

model Comment {
  id String @id @map("_id") @default(auto()) @db.ObjectId

  recipeId String
  recipe Recipe @relation(fields: [recipeId], references: [id])
  
  userId String
  user User @relation(fields: [userId], references: [id])
  
  content String
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Rating {
  id String @id @map("_id") @default(auto()) @db.ObjectId

  recipeId String
  recipe Recipe @relation(fields: [recipeId], references: [id])

  userId String
  user User @relation(fields: [userId], references: [id])

  score Int @default(1)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Ingredient {
  id String @id @map("_id") @default(auto()) @db.ObjectId
  name String @unique

  ingredient Recipe_Ingredient[]

  categoryId String?
  category Category? @relation(fields: [categoryId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id String @id @map("_id") @default(auto()) @db.ObjectId

  recipe Recipe[]

  ingredient Ingredient[]

  name String @unique
  description String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Step {
  id String @id @map("_id") @default(auto()) @db.ObjectId

  recipeId String?
  recipe Recipe? @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  stepTitle String
  content String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Favorite {
  id String @id @map("_id") @default(auto()) @db.ObjectId

  recipeId String
  recipe Recipe @relation(fields: [recipeId], references: [id])

  userId String
  user User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Stats {
  id String @id @map("_id") @default(auto()) @db.ObjectId
 
  recipeId String @unique
  recipe Recipe? @relation(fields: [recipeId], references: [id])

  likes Int @default(0)
  views Int @default(0)
  favorites Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}   








